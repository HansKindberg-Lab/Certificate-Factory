@model HostCertificateViewModel
<div class="card">
	<div class="card-header">
		<h1 class="h4 m-0 p-0">Host-certificate</h1>
	</div>
	<div class="card-body">
		@if(!string.IsNullOrEmpty(Model.Error))
		{
			<div class="alert alert-danger mt-3">
				<h2 class="h4">Error</h2>
				<p>@Model.Error</p>
				@if(Model.ErrorDetails.Any())
				{
					<ul>
						@foreach(var detail in Model.ErrorDetails)
						{
							<li>@detail</li>
						}
					</ul>
				}
			</div>
		}

		@if(Model.Certificate != null)
		{
			<h2 class="h4">@Model.Certificate.Subject</h2>
			<dl>
				<dt class="d-inline">Archived: </dt>
				<dd class="d-inline">
					@Model.Certificate.Archived.ToString().ToLowerInvariant()<br />
				</dd>
				<dt class="d-inline">Friendly name: </dt>
				<dd class="d-inline">
					@Model.Certificate.FriendlyName<br />
				</dd>
				<dt class="d-inline">Has private key: </dt>
				<dd class="d-inline">
					@Model.Certificate.HasPrivateKey.ToString().ToLowerInvariant()<br />
				</dd>
				<dt class="d-inline">Issuer: </dt>
				<dd class="d-inline">
					@Model.Certificate.Issuer<br />
				</dd>
				<dt class="d-inline">Key-algorithm: </dt>
				<dd class="d-inline">
					@Model.Certificate.KeyAlgorithm<br />
				</dd>
				<dt class="d-inline">Key-algorithm (name): </dt>
				<dd class="d-inline">
					@Model.Certificate.KeyAlgorithmName<br />
				</dd>
				<dt class="d-inline">Not after: </dt>
				<dd class="d-inline">
					@Model.Certificate.NotAfter<br />
				</dd>
				<dt class="d-inline">Not before: </dt>
				<dd class="d-inline">
					@Model.Certificate.NotBefore<br />
				</dd>
				<dt class="d-inline">Serial number: </dt>
				<dd class="d-inline">
					@Model.Certificate.SerialNumber<br />
				</dd>
				<dt class="d-inline">Signature-algorithm: </dt>
				<dd class="d-inline">
					@Model.Certificate.SignatureAlgorithm<br />
				</dd>
				<dt class="d-inline">Store: </dt>
				<dd class="d-inline">
					@Model.Certificate.Store<br />
				</dd>
				<dt class="d-inline">Subject: </dt>
				<dd class="d-inline">
					@Model.Certificate.Subject<br />
				</dd>
				<dt class="d-inline">Thumbprint: </dt>
				<dd class="d-inline">
					@Model.Certificate.Thumbprint<br />
				</dd>
				<dt class="d-inline">Version: </dt>
				<dd class="d-inline">
					@Model.Certificate.Version<br />
				</dd>
				<dt class="d-inline">String-representation: </dt>
				<dd class="d-inline">
					<i>@Model.Certificate.StringRepresentation</i><br />
				</dd>
			</dl>
			<div>
				<h3 class="h5">Construction-tree</h3>
				<code>
					<pre>@Model.Certificate.ConstructionTree</pre>
				</code>
			</div>
			@if(Model.ValidatedReturnUrl != null)
			{
				<div class="text-end">
					<a class="btn btn-primary" href="@Model.ValidatedReturnUrl">Return</a>
				</div>
			}
		}
		else if(string.IsNullOrEmpty(Model.Error))
		{
			<div class="alert alert-warning mt-3">The certificate does not exist.</div>
		}
	</div>
</div>