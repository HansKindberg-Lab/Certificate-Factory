@model HostCertificatesViewModel
@await Html.PartialAsync("~/Views/Shared/Modal.cshtml", new Modal { Text = "Searching..." })
<div class="card">
	<div class="card-header">
		<h1 class="h4 m-0 p-0">Host-certificates</h1>
	</div>
	<div class="card-body">
		<form method="get">
			<fieldset class="border border-2 border-light p-3 pt-2 rounded-3">
				<legend>Search</legend>
				<p>"*" is wildcard.</p>
				<div class="mb-3">
					<label asp-for="FriendlyName"></label>
					<input asp-for="FriendlyName" class="form-control" />
				</div>
				<div class="mb-3">
					<label asp-for="Issuer"></label>
					<input asp-for="Issuer" class="form-control" />
				</div>
				<div class="mb-3">
					<label asp-for="SerialNumber"></label>
					<input asp-for="SerialNumber" class="form-control" />
				</div>
				<div class="mb-3">
					<label asp-for="StoreLocation"></label>
					<select asp-for="StoreLocation" asp-items="@Model.StoreLocations" class="form-control"></select>
				</div>
				<div class="mb-3">
					<label asp-for="StoreName"></label>
					<input asp-for="StoreName" class="form-control" />
				</div>
				<div class="mb-3">
					<label asp-for="Subject"></label>
					<input asp-for="Subject" class="form-control" />
				</div>
				<div class="mb-3">
					<label asp-for="Thumbprint"></label>
					<input asp-for="Thumbprint" class="form-control" />
				</div>
				<!-- Timestamp field to make the input fields change all the time. -->
				<input name="ts" type="hidden" value="@DateTime.UtcNow.Ticks" />
				<div class="text-end">
					<button asp-fragment="result" class="btn btn-primary" data-bs-target="#modal" data-bs-toggle="modal" name="FormAction" type="submit" value="Search">Search</button>
					<button asp-fragment="reset" class="btn btn-secondary" name="FormAction" type="submit" value="Reset">Reset</button>
				</div>
			</fieldset>
		</form>
		@if(string.IsNullOrEmpty(Model.Error))
		{
			if(Model.Action == SearchFormAction.Search)
			{
				if(Model.Certificates.Any())
				{
					<div class="alert alert-light mt-3" id="result">
						<h2 class="h4">Search-result</h2>
						<p>Number of hits: <strong>@Model.Certificates.SelectMany(item => item.Value).Count()</strong></p>
						@foreach(var (store, certificates) in Model.Certificates)
						{
							<h3 class="h5">@store</h3>
							@if(certificates.Any())
							{
								<ul>
									@foreach(var certificate in certificates.OrderBy(certificate => certificate.Subject))
									{
										<li id="@certificate.Identifier">
											<a asp-controller="HostCertificate" asp-route-returnUrl="@Context.Request.GetEncodedPathAndQuery()#@certificate.Identifier" asp-route-storeLocation="@certificate.StoreLocation" asp-route-storeName="@certificate.StoreName" asp-route-thumbprint="@certificate.Thumbprint">@certificate.Subject</a>
										</li>
									}
								</ul>
							}
						}
					</div>
				}
				else
				{
					<div class="alert alert-warning mt-3" id="result">The search gave no hits.</div>
				}
			}
		}
		else
		{
			<div class="alert alert-danger mt-3" id="result">
				<h2 class="h4">Error</h2>
				<p>@Model.Error</p>
			</div>
		}
	</div>
</div>